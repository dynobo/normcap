[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "normcap"
version = "0.5.8"
description = "OCR-powered screen-capture tool to capture information instead of images."
keywords = ["screenshot", "ocr", "capture", "clipboard"]
readme = "README.md"
requires-python = ">=3.9,<3.12"
license = "GPL-3.0-or-later"
authors = [{ name = "dynobo", email = "dynobo@mailbox.org" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Utilities",
  "Topic :: Multimedia :: Graphics :: Capture :: Screen Capture",
  "Intended Audience :: End Users/Desktop",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Operating System :: MacOS",
]
dependencies = [
  "shiboken6==6.7.1",
  "PySide6-Essentials==6.7.1",
  "jeepney==0.8.0",
]

[project.urls]
Homepage = "https://dynobo.github.io/normcap/"
Issues = "https://github.com/dynobo/normcap/issues"
"Source Code" = "https://github.com/dynobo/normcap"
FAQs = "https://dynobo.github.io/normcap/#faqs"
Changelog = "https://github.com/dynobo/normcap/blob/main/CHANGELOG"

[project.scripts]
normcap = "normcap.app:run"

[tool.hatch.build]
exclude = ["assets", "*.po"]
artifacts = ["*.mo"]

[tool.hatch.build.hooks.custom]
dependencies = ["babel", "toml"]

[tool.hatch.envs.default]
dependencies = [
  "babel>=2.12.1",
  "briefcase==0.3.16",             # pinned because building relies on it!
  "coverage[toml]>=6.5",
  "coveralls>=3.3.1",
  "mdformat-gfm>=0.3.6",
  "mdformat-simple-breaks>=0.0.1",
  "mdformat-mkdocs>=2.0.1",
  "mdformat-frontmatter>=2.0.1",
  "mkdocs-material==9.5.19",       # pinned because docs rely on it!
  "mkdocs-glightbox>=0.3.5",
  "mypy>=1.3.0",
  "pip-audit>=2.5.5",
  "pre-commit>=3.0.2",
  "pydeps>=1.11.0",
  "pytest-cov>=4.0.0",
  "pytest-instafail>=0.5.0",
  "pytest-qt>=4.2.0",
  "pytest-xvfb>=3.0.0",
  "pytest>=7.2.1",
  "retry2>=0.9.5",
  "rope>=1.7.0",
  "ruff>=0.0.239",
  "tbump>=6.9.0",
  "toml>=0.10.2",
  "types-retry>=0.9.9.4",
  "types-toml>=0.10.8.1",
  "typing-extensions>=4.4.0",
]

[tool.hatch.envs.default.scripts]

typing = "mypy"
test = ["pytest {args:tests}", "coverage lcov"]
security = "pip-audit"
fmt = [
  "ruff --fix {args:.}",
  "ruff format {args:.}",
  "mdformat --align-semantic-breaks-in-lists --end-of-line keep {args:.}",
]
fmt-check = [
  "ruff check {args:.}",
  "ruff format --check --diff {args:.}",
  "mdformat --align-semantic-breaks-in-lists --end-of-line keep {args:.}",
]
charts = [
  "pydeps normcap --max-bacon=2 -o=pydeps.png -T=png",
  "pydeps normcap --max-bacon=1 -o=pydeps_internal.png -T=png",
]
# Main tasks:
check = ["locales-compile", "fmt-check", "typing", "test", "security"]
pre-commit = ["locales-compile", "fmt", "typing", "test", "security", "charts"]
locales-compile = "python bundle/l10n.py"
locales-update = "python bundle/l10n.py --update-all"
create-locale = "python bundle/l10n.py --create-new"
version = "tbump {args:current-version}"
bundle = ["locales-compile", "python bundle/build.py {args}"]
serve-docs = "mkdocs serve"
build-docs = "mkdocs build"

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.analysis]
template = "analysis"
dependencies = ["radon>=5.1.0", "viztracer>=0.15.3", "vulture>=2.4"]

[tool.hatch.envs.analysis.scripts]
metrics = """
  echo "For metrics description see: https://radon.readthedocs.io/en/latest/intro.html" \
  && echo '\n------[ Cyclomatic Complexity ]-------\n' \
  && radon cc . \
  && echo '\n\n------[ Maintainability Index ]-------\n' \
  && radon mi .
  """
trace = "viztracer --open --log_gc --ignore_c_function -- normcap/app.py"
trace-view = "vizviewer {args:result.json}"
unused = "vulture {args:} normcap tests bundle"

[tool.ruff]
target-version = "py39"
line-length = 88
exclude = [".venv"]

[tool.ruff.lint]
select = [
  "F",    # Pyflakes
  "E",    # pycodestyle
  "I",    # Isort
  "D",    # pydocstyle
  "W",    # warning
  "UP",   # pyupgrad
  "N",    # pep8-naming
  "C90",  # mccabe
  "TRY",  # tryceratops (exception handling)
  "ANN",  # flake8-annotations
  "S",    # flake8-bandits
  "C4",   # flake8-comprehensions
  "B",    # flake8-bugbear
  "A",    # flake8-builtins
  "ISC",  # flake8-implicit-str-concat
  "ICN",  # flake8-import-conventions
  "T20",  # flake8-print
  "PYI",  # flake8-pyi
  "PT",   # flake8-pytest-style
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "SIM",  # flake8-simplify
  "PTH",  # flake8-use-pathlib
  "G",    # flake8-logging-format
  "PL",   # pylint
  "RUF",  # meta rules (unused noqa)
  "PL",   # meta rules (unused noqa)
  "PERF", # perflint
]
ignore = [
  "D100",   # Missing docstring in public module
  "D101",   # Missing docstring in public class
  "D102",   # Missing docstring in public method
  "D103",   # Missing docstring in public function
  "D104",   # Missing docstring in public package
  "D107",   # Missing docstring in __init__
  "ANN101", # Missing type annotation for `self` in method
  "TRY003", # Avoid specifying long messages outside the exception class
  "ISC001", # Rule conflicts with ruff's formatter
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["PLR2004", "PLR0913", "S101", "TID252", "ANN", "D"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["normcap"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.mypy]
files = ["normcap/**/*.py", "tests/**/*.py", "bundle/**/*.py"]
follow_imports = "skip"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
qt_api = "pyside6"
xvfb_width = 1920
xvfb_height = 1080
addopts = [
  "-vv",
  "--durations=5",
  "--showlocals",
  "--instafail",
  "--cov",
  "--cov-report=xml",
  "--cov-report=html",
]
markers = ["gui: tests which require a graphical interface to run"]

[tool.coverage.run]
source = ["normcap"]
branch = true
parallel = true
omit = []

[tool.mdformat]
wrap = 88
number = true
end_of_line = "keep"

[tool.pydeps]
no_show = true
cluster = true
max_cluster_size = 1

[tool.briefcase]
project_name = "NormCap"
bundle = "eu.dynobo"
version = "0.5.8"
url = "https://github.com/dynobo/normcap"
license = "GPLv3"
author = 'dynobo'
author_email = "dynobo@mailbox.org"

[tool.briefcase.app.normcap]
formal_name = "NormCap"
description = "OCR-powered screen-capture tool to capture information instead of images"
sources = ["normcap"]
icon = "bundle/imgs/normcap"
installer_icon = "bundle/imgs/normcap_install"
installer_background = "bundle/imgs/normcap_install_bg"
requires = ["PySide6-Essentials==6.7.1", "shiboken6==6.7.1", "jeepney==0.8.0"]
cleanup_paths = [
  # Globs
  "**/[pP]y[sS]ide6/*[qQ]t*[oO]pen[gG][lL]*",
  "**/*.debug",
  "**/*[lL]abs*",
  "**/*[qQ]t[xX]ml*",
  "**/*[qQ]t*[dD]esigner*",
  "**/*[qQ]t*[hH]elp*",
  "**/*[qQ]t*[pP]df*",
  "**/*[qQ]t*[pP]rint[sS]upport*",
  "**/*[qQ]t*[sS]ql*",
  "**/*[qQ]t*[sS]tate[mM]achine*",
  "**/*[qQ]t*[tT]est*",
  "**/*[qQ]t*[lL]anguage[sS]erver*",
  "**/*[qQ]t*[wW]eb[sS]ockets*",
  "**/*[qQ]uick*",
  "**/*[sS]cene*",
  "**/*[uU]i[tT]ools*",
  "**/*[vV]irtual[kK]eyboard*",
  "**/*QtQml*",
  "**/bin/pyside6-*",
  "**/PySide6/[aA]ssistant*",
  "**/PySide6/[dD]esigner*",
  "**/PySide6/[lL]inguist*",
  # Folders
  "**/__pycache__",
  "**/examples",
  "**/libexec",
  "**/plugins/designer",
  "**/plugins/printsupport",
  "**/plugins/qmltooling",
  "**/plugins/sqldrivers",
  "**/Qt/qml/QtQml",
  "**/Qt/translations",
  "**/tests",
  "**/typesystems",
  # Files
  "**/PySide6/lrelease",
  "**/PySide6/lupdate",
  # Windows specific files
  "**/NormCap.exe.metagen",
  "**/NormCap.pdb",
]

[tool.briefcase.app.normcap.macOS]
requires = ["std-nslog==1.0.0"]

[tool.briefcase.app.normcap.linux.appimage]
template = "https://github.com/beeware/briefcase-linux-appimage-template"
template_branch = "v0.3.16"
manylinux = "manylinux_2_28"
manylinux_image_tag = "latest"
system_requires = [
  "wget",
  "tesseract",
  # wl-clipboard deps
  "wayland-devel",
  "wayland-protocols-devel",
  "meson",
  # xcb-utils-cursor deps
  "libxcb-devel",
  "libxkbcommon-x11",
  "epel-release",     # for xcb-util-cursor
]

dockerfile_extra_content = """
USER root

RUN dnf config-manager --add-repo https://download.opensuse.org/repositories/home:Alexander_Pozdnyakov:tesseract5/CentOS_8/home:Alexander_Pozdnyakov:tesseract5.repo
RUN dnf config-manager --set-enabled home_Alexander_Pozdnyakov_tesseract5
RUN dnf upgrade -y

RUN wget "https://pkgs.dyn.su/el8/base/x86_64/raven-release.el8.noarch.rpm"
RUN rpm -ivh raven-release*.rpm
RUN dnf update -y
RUN dnf install -y \
  qt6-qtwayland \
  xclip \
  xcb-util-cursor \
  xcb-util-wm \
  xcb-util-keysyms \
  xsel

RUN git clone https://github.com/bugaevc/wl-clipboard.git
RUN cd wl-clipboard \
  && git checkout tags/v2.2.1 -b v2.2.1-branch \
  && meson setup build \
  && cd build \
  && ninja \
  && meson install

ENV LD_LIBRARY_PATH "$LD_LIBRARY_PATH:/app/NormCap.AppDir/usr/app_packages/shiboken6"

USER brutus
"""

[tool.briefcase.app.normcap.windows]
use_full_install_path = false


[tool.tbump.version]
current = "0.5.8"
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  (\-
    (?P<extra>.+)
  )?
  '''

[tool.tbump.git]
message_template = "build(release): bump to {new_version}"
tag_template = "v{new_version}"

[[tool.tbump.file]]
# Project version and Briefcase version
src = "pyproject.toml"
search = 'version = "{current_version}"'

[[tool.tbump.file]]
src = "normcap/__init__.py"
search = '__version__ = "{current_version}"'

[[tool.tbump.file]]
src = "docs/index.md"

[[tool.tbump.file]]
src = "README.md"
search = 'NormCap-{current_version}-'

[[tool.tbump.file]]
src = "README.md"
search = 'download/v{current_version}/'

[[tool.tbump.before_commit]]
name = "check changelog"
cmd = "grep -q {new_version} CHANGELOG"
