"""Test image enhancing methods."""

import copy

from PIL import Image, ImageDraw  # type: ignore

from normcap.enhance import EnhanceImage
from normcap.models import Capture

# pylint: disable=unused-import
from .fixtures import capture

# Allow pytest fixtures:
# pylint: disable=redefined-outer-name
# Allow usint privates:
# pylint: disable=protected-access


def test_enhance_only_change_image(capture: Capture):
    """Check if image get manipulated but nothing else."""
    initial_dict = copy.deepcopy(capture.__dict__)
    enhance = EnhanceImage()
    capture = enhance(capture)
    final_dict = copy.deepcopy(capture.__dict__)

    initial_image = initial_dict.pop("image")
    final_image = final_dict.pop("image")

    assert initial_image != final_image
    assert initial_dict == final_dict


def test_enlarge_dpi(capture: Capture):
    """Check if enlarging of image uses correct factor."""
    enhance = EnhanceImage()
    factor = 3
    enlarged_image = enhance._enlarge_dpi(capture.image, factor)
    if isinstance(capture.image, Image.Image):
        assert enlarged_image.size[0] == capture.image.size[0] * factor
        assert enlarged_image.size[1] == capture.image.size[1] * factor
    else:
        raise ValueError("Not a valid PIL image")


def test_add_padding(capture: Capture):
    """Test if padding adds border of correct size."""
    enhance = EnhanceImage()
    width = 30
    padded_image = enhance._add_padding(capture.image, width)
    if isinstance(capture.image, Image.Image):
        assert padded_image.size[0] == capture.image.size[0] + 2 * width
        assert padded_image.size[1] == capture.image.size[1] + 2 * width
    else:
        raise ValueError("Not a valid PIL image")


def test_most_frequent_color(capture: Capture):
    """Test if color that is most often present in image is returned."""
    enhance = EnhanceImage()
    color = enhance._most_frequent_color(capture.image)
    assert color == (0, 254, 0)


def test_stretch_contrast():
    """Test if contrast is stretched correctely."""
    # Generate image with two gray colors
    image = Image.new(mode="RGB", size=(200, 200), color=(150, 150, 150))
    draw = ImageDraw.Draw(image)
    draw.rectangle((0, 0, 100, 200), fill=(200, 200, 200))

    enhance = EnhanceImage()
    contrast_image = enhance._strech_contrast(image)

    # Color should be black and white after contrast stretching
    darker_pixel = contrast_image.getpixel((150, 100))
    lighter_pixel = contrast_image.getpixel((50, 100))

    assert darker_pixel == (0, 0, 0)
    assert lighter_pixel == (254, 254, 254)
