# Infos on current github runners:
# https://docs.github.com/en/free-pro-team@latest/actions/reference/specifications-for-github-hosted-runners#about-github-hosted-runners

name: Build
on: [pull_request, push]

jobs:
  # Run tests on all pull requests or when triggered via [test] tag
  test:
    name: Linting & Tests
    runs-on: ${{ matrix.os }}
    if: |
      github.event_name == 'pull_request'
      || contains(github.event.head_commit.message, '[test]')
      || startsWith(github.ref, 'refs/tags/v')
    strategy:
      fail-fast: false
      matrix:
        os: [macos-10.15, windows-2019, ubuntu-20.04]
    steps:
      # SETUP ENVIRONMENT
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - uses: abatilo/actions-poetry@v2.1.4
        with:
          poetry-version: 1.2.0b2

      - name: Prepare Linux
        if: ${{ matrix.os  == 'ubuntu-20.04' }}
        run: |
          sudo apt-get update
          sudo apt-get install \
            python3-pil \
            tesseract-ocr \
            tesseract-ocr-eng
          sudo apt-get install \
            xvfb \
            libxkbcommon-x11-0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-xinerama0 \
            libxcb-xfixes0 \
            libegl1 \
            libegl1-mesa
          ls -la
          echo "XDG_SESSION_TYPE=gnome" >> $GITHUB_ENV

      - name: Prepare MacOS
        if: ${{ matrix.os  == 'macos-10.15' }}
        run: |
          brew install pkg-config tesseract dylibbundler
          brew info tesseract
          "/Library/Application Support/VMware Tools/vmware-resolutionSet" 1920 1080
          ls -R /usr/local/Cellar/tesseract/
          ls -R /usr/local/Cellar/leptonica/
          ls -la

      - name: Prepare Windows
        if: ${{ matrix.os  == 'windows-2019' }}
        run: |
          $url = "https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-w64-setup-v5.0.1.20220118.exe"
          Invoke-WebRequest -Uri $url -OutFile "tesseract_installer.exe"
          7z x tesseract_installer.exe -O"C:\Program Files\Tesseract-OCR"
          $tesseract = "C:\Program Files\Tesseract-OCR\"
          echo "$tesseract" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "TESSDATA_PREFIX=$tesseract" >> $env:GITHUB_ENV
          Set-DisplayResolution -Width 1920 -Height 1080 -Force
          dir

      - name: Test tesseract
        run: |
          tesseract --version
          tesseract --list-langs

      - name: Poetry install
        run: |
          poetry install

      # PERFORM TESTS
      - name: Pylint
        continue-on-error: true
        if: always()
        run: poetry run pylint src/normcap src/tests/
      - name: Mypy
        if: always()
        run: poetry run mypy .
      - name: Black
        if: always()
        run: poetry run black --check --diff .
      - name: Isort
        if: always()
        run: poetry run isort --check .
      - name: Pydocstyle
        if: always()
        run: poetry run pydocstyle
      - name: Safety
        if: always()
        run: poetry run safety check
      - name: Bandit
        if: always()
        run: poetry run bandit --quiet --severity-level medium -r src/normcap
      - name: Pytest
        run: |
          poetry run pytest -m "not skip_on_gh" -cov --cov-report=xml

      - name: Coveralls
        if:
          ${{ matrix.os  == 'ubuntu-20.04' && github.repository ==
          'dynobo/normcap' }}
        run: poetry run coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_TOKEN }}

      - name: SonarCloud
        if:
          ${{ matrix.os  == 'ubuntu-20.04' && github.repository
          =='dynobo/normcap' }}
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Build test packages
      - name: Build test package briefcase
        shell: bash -l {0}
        run: poetry run python package/build.py --framework=briefcase --dev
      - name: Build test package nuitka
        shell: bash -l {0}
        continue-on-error: true
        run: poetry run python package/build.py --framework=nuitka --dev
      - name: List files
        shell: bash -l {0}
        run: ls -la ./package

      # Release test package
      - name: Set current date as env variable
        shell: bash -l {0}
        run: echo "NOW=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV
      - name: Draft internal release
        uses: ncipollo/release-action@v1
        if: ${{ github.repository == 'dynobo/normcap' }}
        with:
          name: Internal
          body:
            "Only for internal tests. Should not be published. [${{ env.NOW }}]"
          artifacts: "*/*.+(dmg|AppImage|msi|zip)"
          artifactErrorsFailBuild: false
          allowUpdates: true
          draft: true
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: "internal"

  build-python:
    name: Build and release new Python package
    needs: test
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - uses: abatilo/actions-poetry@v2.1.4
        with:
          poetry-version: 1.1.12
      - name: Poetry publish
        run: |
          poetry publish --build --username __token__ --password ${{ secrets.PYPI_TOKEN }}

  build-packages:
    name: Build and release packages
    needs: test
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-10.15, windows-2019]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - uses: abatilo/actions-poetry@v2.1.4
        with:
          poetry-version: 1.1.12
      - name: Extract version from tag
        id: extract_version
        uses: damienaicheh/extract-version-from-tag-action@v1.0.0
      - name: Install dependencies
        shell: bash -l {0}
        run: |
          poetry install
      - name: Build package nuitka
        shell: bash -l {0}
        run: |
          poetry run python package/build.py --framework=nuitka
          ls -la ./package
      - name: Build package briefcase
        shell: bash -l {0}
        run: |
          poetry run python package/build.py --framework=briefcase
          ls -la ./package
      - name: Draft release
        uses: ncipollo/release-action@v1
        with:
          body:
            See
            [CHANGELOG](https://github.com/dynobo/normcap/blob/main/CHANGELOG.md)
            for details.
          artifacts: "*/*.+(dmg|AppImage|msi|zip)"
          artifactErrorsFailBuild: false
          allowUpdates: true
          draft: true
          prerelease: ${{ steps.extract_version.outputs.PRE_RELEASE != ''}}
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy-pages:
    name: Deploy github pages
    needs: build-packages
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Deploy pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
